var Communication;
(function(Communication) {
    var CommunicationManager = (function() {
        function CommunicationManager() {}
        CommunicationManager.init = function() {
            var endpoint = (window.location.hostname.indexOf("localhost") !== -1) ?
                "ws://localhost:2567" :
                "wss://" + window.location.hostname;
            if (typeof gameConfig.WebsocketsServer != "undefined") {
                endpoint = gameConfig.WebsocketsServer;
            }
            CommunicationManager.client = new Colyseus.Client(endpoint);
        };
        CommunicationManager.joinRoom = function(data) {
            CommunicationManager.hasMatchStarted = false;
            CommunicationManager.state = {
                playerA: null,
                playerB: null,
                currentTurn: null,
                changeTurn: false,
                numberShots: 0,
                balls: [],
                ballInHand: true,
                pocketSelected: -1,
                fault: CommunicationManager.NOTIFICATION_NONE,
                resign: false,
                playerLeft: false,
                winnerSessionId: null
            };
            CommunicationManager.room = CommunicationManager.client.join("pool_room", data);
            CommunicationManager.client.onError.add(function(error) {
                console.log("error:", error);
                CommunicationManager.waitingPlayerEnd();
            });
            CommunicationManager.room.onJoin.add(function() {});
            CommunicationManager.room.onStateChange.add(CommunicationManager.onStateChange);
            CommunicationManager.room.onLeave.add(CommunicationManager.onleaveRoom);
            CommunicationManager.room.onMessage.add(CommunicationManager.messageReceived);
            return CommunicationManager.room !== null || typeof CommunicationManager.room !== "undefined";
        };
        CommunicationManager.leaveRoom = function() {
            CommunicationManager.room.leave();
        };
        CommunicationManager.sendMessage = function(message) {
            if (CommunicationManager.room) {
                CommunicationManager.room.send(message);
            }
        };
        CommunicationManager.onStateChange = function(state) {
            var prevState = CommunicationManager.state;
            CommunicationManager.state = state;
            if (!CommunicationManager.hasMatchStarted) {
                if (prevState.playerB === null && state.playerB !== null) {
                    var players = {
                        playerA: {
                            nick: state.playerA.nick,
                            avatar: state.playerA.avatar,
                            equipedCue: state.playerA.equipedCue,
                            sessionId: state.playerA.sessionId,
                            id: state.playerA.id,
                            canPocketBlackBall: false
                        },
                        playerB: {
                            nick: state.playerB.nick,
                            avatar: state.playerB.avatar,
                            equipedCue: state.playerB.equipedCue,
                            sessionId: state.playerB.sessionId,
                            id: state.playerB.id,
                            canPocketBlackBall: false
                        }
                    };
                    CommunicationManager.onPlayerJoined(players, state.playerA.id === CommunicationManager.client.id);
                } else if (prevState.playerA === null && state.playerA !== null) {
                    var players = {
                        playerA: {
                            nick: state.playerA.nick,
                            avatar: state.playerA.avatar,
                            equipedCue: state.playerA.equipedCue,
                            sessionId: state.playerA.sessionId,
                            id: state.playerA.id,
                            canPocketBlackBall: false
                        },
                        playerB: null
                    };
                    CommunicationManager.onPlayerJoined(players, state.playerA.id === CommunicationManager.client.id);
                }
                if (state.playerA && state.playerB && state.playerA.set && state.playerB.set) {
                    CommunicationManager.hasMatchStarted = true;
                    CommunicationManager.startMatch();
                }
            }
            if (state.winnerSessionId) {
                CommunicationManager.matchFinished(state.winnerSessionId);
            } else if (prevState.numberShots !== state.numberShots) {
                CommunicationManager.onTurnChange(state);
            }
            if (prevState.playerLeft !== state.playerLeft) {
                CommunicationManager.adversaryLeftRoom();
            }
        };
        CommunicationManager.messageReceived = function(message) {
            switch (message.type) {
                case CommunicationManager.MESSAGE_TYPE_PLAYER_LEFT:
                    CommunicationManager.adversaryLeftRoom();
                    break;
                case CommunicationManager.MESSAGE_TYPE_RESIGN:
                    CommunicationManager.matchOverDueToResignation(message.data);
                    break;
                case CommunicationManager.MESSAGE_TYPE_POCKET_SELECTED:
                    CommunicationManager.showPocketSelected(message.data);
                    break;
                case CommunicationManager.MESSAGE_TYPE_CUE_ROTATION:
                    CommunicationManager.adversaryRotatedCue(message.data);
                    break;
                case CommunicationManager.MESSAGE_TYPE_CUE_BALL:
                    CommunicationManager.adversaryCueBallPosition(message.data);
                    break;
                case CommunicationManager.MESSAGE_TYPE_SHOT:
                    CommunicationManager.shotDataReceived(message.data);
                    break;
                case CommunicationManager.MESSAGE_TYPE_WAITING_END:
                    CommunicationManager.waitingPlayerEnd();
                    break;
                case CommunicationManager.MESSAGE_TYPE_EMOTICON_SELECTED:
                    CommunicationManager.showEmoticon(message.data);
                    break;
                case CommunicationManager.MESSAGE_TYPE_CUE_BALL_SPIN_SET:
                    CommunicationManager.cueBallSpinSet(message.data);
                    break;
                default:
                    break;
            }
        };
        CommunicationManager.onleaveRoom = function() {
            console.log("DISCONECTED");
            CommunicationManager.adversaryLeftRoom();
        };
        CommunicationManager.MESSAGE_TYPE_PLAYER_JOINED = "PLAYER_JOINED";
        CommunicationManager.MESSAGE_TYPE_MATCH_START = "MATCH_START";
        CommunicationManager.MESSAGE_TYPE_SET_PLAYER = "SET PLAYER";
        CommunicationManager.MESSAGE_TYPE_PLAYER_SET = "PLAYER SET";
        CommunicationManager.MESSAGE_TYPE_SHOT = "SHOT";
        CommunicationManager.MESSAGE_TYPE_PLAYER_LEFT = "PLAYER_LEFT";
        CommunicationManager.MESSAGE_TYPE_WAITING_END = "WAITING_END";
        CommunicationManager.MESSAGE_TYPE_BALLS_STOPPED = "BALLS_STOPPED";
        CommunicationManager.MESSAGE_TYPE_TURN_CHANGE = "TURN_CHANGE";
        CommunicationManager.MESSAGE_TYPE_TIME_OUT = "TIME_OUT";
        CommunicationManager.MESSAGE_TYPE_CUE_ROTATION = "CUE_ROTATION";
        CommunicationManager.MESSAGE_TYPE_POCKET_SELECTED = "POCKET_SELECTED";
        CommunicationManager.MESSAGE_TYPE_CUE_BALL = "CUE_BALL";
        CommunicationManager.MESSAGE_TYPE_RESIGN = "RESIGN";
        CommunicationManager.MESSAGE_TYPE_MATCH_END = "MATCH_END";
        CommunicationManager.MESSAGE_TYPE_PLAYER_QUIT_LOBBY = "PLAYER_QUIT_LOBBY";
        CommunicationManager.MESSAGE_TYPE_EMOTICON_SELECTED = "EMOTICON_SELECTED";
        CommunicationManager.MESSAGE_TYPE_CUE_BALL_SPIN_SET = "CUE_BALL_SPIN_SET";
        CommunicationManager.NOTIFICATION_NONE = "notification none";
        CommunicationManager.NOTIFICATION_CUE_BALL_POTTED = "notification cue ball potted";
        CommunicationManager.NOTIFICATION_WRONG_BALL_POTTED = "notification wrong ball potted";
        CommunicationManager.NOTIFICATION_WRONG_BALL_TOUCHED = "notification wrong ball touched";
        CommunicationManager.NOTIFICATION_NO_BALL_TOUCHED = "notification no ball touched";
        CommunicationManager.NOTIFICATION_TIMEOUT = "notification timeout";
        CommunicationManager.room = null;
        CommunicationManager.client = null;
        return CommunicationManager;
    }());
    Communication.CommunicationManager = CommunicationManager;
})(Communication || (Communication = {}));